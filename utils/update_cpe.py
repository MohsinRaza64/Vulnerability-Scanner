import json
import requests
import time
from datetime import datetime

def fetch_all_cpe_data(results_per_page=2000, max_retries=5, max_backoff_time=256):
    base_url = "https://services.nvd.nist.gov/rest/json/cpes/2.0" 
    all_cpe_data = []
    page_number = 0
    backoff_time = 1
    retries = 0

    while True:
        params = {
            'resultsPerPage': results_per_page,
            'startIndex': page_number * results_per_page
        }

        try:
            response = requests.get(base_url, params=params)
            print(f"Request URL: {response.url}") 
            print(f"Response Status Code: {response.status_code}")  
            
            if response.status_code != 200:
                raise requests.exceptions.RequestException(f"Failed request: {response.status_code}")
                
            data = response.json()
            print(f"Response Data: {json.dumps(data, indent=2)}")  

            cpes = data.get('products', [])  
            print(f"Retrieved {len(cpes)} new CPEs.")

            if not cpes:
                break

            all_cpe_data.extend(cpes)
            page_number += 1
            backoff_time = 1
            retries = 0
            time.sleep(1)

        except requests.exceptions.RequestException as e:
            print(f"Error fetching data: {e}")
            if response and response.status_code == 403:
                if backoff_time >= max_backoff_time or retries >= max_retries:
                    print("Max backoff time or retries reached. Stopping...")
                    break
                print(f"Rate limit hit. Retrying in {backoff_time} seconds...")
                time.sleep(backoff_time)
                backoff_time *= 2
                retries += 1
            else:
                break

    return all_cpe_data

def save_to_json_file(data, filename):
    try:
        with open(filename, 'w') as file:
            json.dump(data, file, indent=2)
        print(f"Data saved to {filename}")
    except Exception as e:
        print(f"Error saving to file: {e}")

def load_json_file(filename):
    try:
        with open(filename, 'r') as file:
            return json.load(file)
    except Exception as e:
        print(f"Error loading JSON file: {e}")
        return None

def extract_cpe_vendor(title):
    words = title.split()
    return words[0] if words else None

def get_cpe_details(cpe_object):
    cpe_data = cpe_object.get('cpe', {})
    cpe_id = cpe_data.get('cpeNameId', 'unknown')
    last_modified = cpe_data.get('lastModified', 'unknown')

    title = 'unknown'
    if 'titles' in cpe_data and isinstance(cpe_data['titles'], list):
        title_obj = next((item for item in cpe_data['titles'] if item.get('lang') == 'en'), cpe_data['titles'][0])
        title = title_obj.get('title', 'unknown')
        
    vendor_name = extract_cpe_vendor(title)
    description = cpe_data.get('cpeName', 'unknown')

    return cpe_id, title, description, last_modified, vendor_name


def sort_cpe_objects_by_published(cpe_data):
    def get_published_date(cpe_object):
        return datetime.strptime(cpe_object.get('lastModified', '1970-01-01T00:00:00.000'), "%Y-%m-%dT%H:%M:%S.%f")

    return sorted(cpe_data, key=get_published_date)

def update_cpe_database():
    filename = "databases\cpe_database.json"
    cpe_data = fetch_all_cpe_data()

    if cpe_data:
        save_to_json_file(cpe_data, filename)
    else:
        print("No data loaded.")
