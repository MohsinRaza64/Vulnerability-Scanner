import json
import requests
import time
from datetime import datetime
from time import sleep

def fetch_all_cve_data(results_per_page=2000, max_retries=5, max_backoff_time=256):
    base_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
    all_cve_data = []
    page_number = 0
    backoff_time = 1
    retries = 0

    while True:
        params = {
            'resultsPerPage': results_per_page,
            'startIndex': page_number * results_per_page
        }
        
        try:
            response = requests.get(base_url, params=params)
            response.raise_for_status()
            
            data = response.json()
            
            vulnerabilities = data.get('vulnerabilities', [])
            print(f"Retrieved {len(vulnerabilities)} new CVEs and extended.")

            if not vulnerabilities:
                break
            
            all_cve_data.extend(vulnerabilities)
            page_number += 1
            backoff_time = 1
            retries = 0

            time.sleep(1)
               
        
        except requests.exceptions.RequestException as e:
            if response.status_code == 403:
                if backoff_time >= max_backoff_time or retries >= max_retries:
                    print(f"Max backoff time or retries reached. Stopping...")
                    break
                print(f"Rate limit hit. Retrying in {backoff_time} seconds...")
                time.sleep(backoff_time)
                backoff_time *= 2  
                retries += 1  
            else:
                print(f"Error fetching data: {e}")
                break
    
    return all_cve_data

def save_to_json_file(data, filename):
    with open(filename, 'w') as file:
        json.dump(data, file, indent=2)
    print(f"Data saved to {filename}")

def load_json_file(filename):
    try:
        with open(filename, 'r') as file:
            data = json.load(file)
            return data
    except Exception as e:
        print(f"Error loading JSON file: {e}")
        return None

def sort_cve_objects_by_published(cve_data):
    def get_published_date(cve_object):
        date_str = cve_object['cve']['published']
        
        try:
            if '.' in date_str:
                return datetime.strptime(date_str, "%Y-%m-%dT%H:%M:%S.%fZ")
            else:
                return datetime.strptime(date_str, "%Y-%m-%dT%H:%M:%S%z")
        except ValueError:
            try:
                return datetime.strptime(date_str, "%Y-%m-%dT%H:%M:%S")
            except ValueError as e:
                print(f"Error parsing date: {e} - Date string: {date_str}")
                return None

    sorted_cve_data = sorted(cve_data, key=get_published_date)
    return sorted_cve_data

def update_cve_database():
    filename = "databases\cve_database.json"
    
    cve_data = fetch_all_cve_data()
    if cve_data:
        save_to_json_file(cve_data, filename)
    else:
        print("No data fetched.")