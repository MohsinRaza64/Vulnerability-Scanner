import json

def find_cve_id_by_cpe(cpe_name):

    cve_file_path = "databases\cve_database.json"

    with open(cve_file_path, 'r') as file:
        cve_data = json.load(file)

    matching_cve_ids = []

    for entry in cve_data:
        cve_entry = entry.get("cve", {})
        configurations = cve_entry.get("configurations", [])

        for config in configurations:
            nodes = config.get("nodes", [])
            for node in nodes:
                cpe_matches = node.get("cpeMatch", [])
                for match in cpe_matches:
                    if match.get("criteria") == cpe_name and match.get("vulnerable"):
                        matching_cve_ids.append(cve_entry.get("id"))

    return matching_cve_ids

def get_cve_details(cve_id):

    cve_file_path = "databases\cve_database.json"

    with open(cve_file_path, 'r') as file:
        cve_data = json.load(file)

    for entry in cve_data:
        if entry.get("cve", {}).get("id") == cve_id:
            cve_entry = entry["cve"]

            cvss_metrics = cve_entry.get("metrics", {}).get("cvssMetricV2", [])
            if cvss_metrics:
                first_metric = cvss_metrics[0]
                base_severity = first_metric.get("baseSeverity")
                exploitability_score = first_metric.get("exploitabilityScore")
                impact_score = first_metric.get("impactScore")
            else:
                base_severity = exploitability_score = impact_score = None

            descriptions = cve_entry.get("descriptions", [])
            description_value = descriptions[0].get("value") if descriptions else None
            
            return {
                "baseSeverity": base_severity,
                "exploitabilityScore": exploitability_score,
                "impactScore": impact_score
                # "description": description_value
            }, description_value

    return None, None

def get_cve_mitigation(cve_id):
    cve_file_path = "databases/cve_database.json"

    with open(cve_file_path, 'r') as file:
        cve_data = json.load(file)

    for entry in cve_data:
        if entry.get("cve", {}).get("id") == cve_id:
            references = entry["cve"].get("references", [])
            for ref in references:
                if "Patch" in ref.get("tags", []):
                    return ref["url"]
    return None