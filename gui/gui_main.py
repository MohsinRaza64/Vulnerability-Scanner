import customtkinter as ctk
from app_scanner.scanner import scan_system
from utils.cve_utils import get_cve_details, get_cve_mitigation, find_cve_id_by_cpe
from utils.cpe_utils import get_cpe
from gui.popup import show_cve_details
from utils.update_cpe import update_cpe_database
from utils.update_cve import update_cve_database
import webbrowser
import threading

bold_font = ("Arial", 12, "bold")

stop_thread = threading.Event()

def button_action(action, product):
    print(f"{action} button clicked for {product}")

def open_webpage(url):
    if url:
        webbrowser.open(url)

def update_database():
    # update_cpe_database()
    # update_cve_database()
    pass

def create_installed_applications_grid(parent, installed_apps):
    scrollable_frame = ctk.CTkScrollableFrame(parent)
    scrollable_frame.pack(expand=True, fill="both")

    ctk.CTkTextbox(scrollable_frame, width=750, height=1, font=bold_font).grid(row=0, column=0, padx=1, pady=1)
    ctk.CTkTextbox(scrollable_frame, width=750, height=1, font=bold_font).grid(row=0, column=1, padx=1, pady=1)

    scrollable_frame.grid_slaves(row=0, column=0)[0].insert("0.0", "Product")
    scrollable_frame.grid_slaves(row=0, column=1)[0].insert("0.0", "Version")

    for i, (product, version) in enumerate(installed_apps, start=1):
        ctk.CTkTextbox(scrollable_frame, width=750, height=1).grid(row=i, column=0, padx=1, pady=1)
        ctk.CTkTextbox(scrollable_frame, width=750, height=1).grid(row=i, column=1, padx=1, pady=1)
        scrollable_frame.grid_slaves(row=i, column=0)[0].insert("0.0", product)
        scrollable_frame.grid_slaves(row=i, column=1)[0].insert("0.0", version)

def create_vulnerable_applications_grid(parent):
    scrollable_frame = ctk.CTkScrollableFrame(parent)
    scrollable_frame.pack(expand=True, fill="both")

    ctk.CTkTextbox(scrollable_frame, width=200, height=1, font=bold_font).grid(row=0, column=0, padx=1, pady=1)
    ctk.CTkTextbox(scrollable_frame, width=200, height=1, font=bold_font).grid(row=0, column=1, padx=1, pady=1)
    ctk.CTkTextbox(scrollable_frame, width=700, height=1, font=bold_font).grid(row=0, column=2, padx=1, pady=1)
    ctk.CTkTextbox(scrollable_frame, width=200, height=1, font=bold_font).grid(row=0, column=3, padx=1, pady=1)
    ctk.CTkTextbox(scrollable_frame, width=200, height=1, font=bold_font).grid(row=0, column=4, padx=1, pady=1)

    scrollable_frame.grid_slaves(row=0, column=0)[0].insert("0.0", "Product")
    scrollable_frame.grid_slaves(row=0, column=1)[0].insert("0.0", "Version")
    scrollable_frame.grid_slaves(row=0, column=2)[0].insert("0.0", "Vulnerability Description")
    scrollable_frame.grid_slaves(row=0, column=3)[0].insert("0.0", "Mitigation Details")
    scrollable_frame.grid_slaves(row=0, column=4)[0].insert("0.0", "Details")

    vulnerable_apps = []

    apps = scan_system()

    for product_name, product_version in apps:
        cpe_name = get_cpe(product_name, product_version)
        if cpe_name:
            cve_list = find_cve_id_by_cpe(cpe_name)
            if cve_list:
                for cve_id in cve_list:
                    cve_details, vulnerability_description = get_cve_details(cve_id)
                    mitigation = get_cve_mitigation(cve_id)
                    vulnerable_apps.append((product_name, product_version, vulnerability_description, mitigation, 'View Details'))
                cve_list.clear()

    for i, (product, version, vulnerability, url, details) in enumerate(vulnerable_apps, start=1):
        ctk.CTkTextbox(scrollable_frame, width=200, height=1).grid(row=i, column=0, padx=1, pady=1)
        ctk.CTkTextbox(scrollable_frame, width=200, height=1).grid(row=i, column=1, padx=1, pady=1)
        ctk.CTkTextbox(scrollable_frame, width=700, height=1).grid(row=i, column=2, padx=1, pady=1)

        scrollable_frame.grid_slaves(row=i, column=0)[0].insert("0.0", product)
        scrollable_frame.grid_slaves(row=i, column=1)[0].insert("0.0", version)
        scrollable_frame.grid_slaves(row=i, column=2)[0].insert("0.0", vulnerability)

        mitigation_button = ctk.CTkButton(scrollable_frame, text="Find Solution", command=lambda url=url: open_webpage(url), width=200, height=31)
        mitigation_button.grid(row=i, column=3, padx=1, pady=1)

        details_button = ctk.CTkButton(scrollable_frame, text="View Details", command=lambda cve=cve_id, p=product, cve_d=cve_details, vuln=vulnerability: show_cve_details(cve, p, cve_d, vuln), width=200, height=31)
        details_button.grid(row=i, column=4, padx=1, pady=1)

def create_update_tab(parent):
    update_frame = ctk.CTkFrame(parent)
    update_frame.pack(expand=True, fill="both")

    status_textbox = ctk.CTkTextbox(update_frame, width=750, height=100)
    status_textbox.pack(padx=10, pady=10)

    def start_update():
        status_textbox.delete("0.0", "end")
        status_textbox.insert("0.0", "Update started, Please don't quit the application!")
        
        threading.Thread(target=run_update).start()

    def run_update():
        update_database()
        status_textbox.insert("end", "\nUpdated successfully!")

    update_button = ctk.CTkButton(update_frame, text="Update Database", command=start_update)
    update_button.pack(padx=10, pady=10)

def populate_grids(installed_tab, vulnerable_tab):
    installed_apps = scan_system()
    create_installed_applications_grid(installed_tab, installed_apps)
    create_vulnerable_applications_grid(vulnerable_tab)

def start_app():
    app = ctk.CTk()
    app.title("Application Vulnerability Tracker")
    app.geometry("1920x1080")
    
    tabview = ctk.CTkTabview(app)
    tabview.pack(expand=True, fill="both")

    installed_tab = tabview.add("Installed Applications")
    vulnerable_tab = tabview.add("Vulnerable Applications")
    update_tab = tabview.add("Update Database")  

    create_update_tab(update_tab) 

    def on_closing():
        stop_thread.set()
        app.destroy()

    app.protocol("WM_DELETE_WINDOW", on_closing)

    thread = threading.Thread(target=populate_grids, args=(installed_tab, vulnerable_tab))
    thread.start()

    app.mainloop()

    thread.join(timeout=1)

if __name__ == "__main__":
    start_app()
